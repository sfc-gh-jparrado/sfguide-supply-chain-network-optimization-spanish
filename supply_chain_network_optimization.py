from snowflake.snowpark.context import get_active_session
import streamlit as st
from abc import ABC, abstractmethod
import datetime
from snowflake.snowpark.functions import col
import operator
import pandas as pd
from faker import Faker
from random import randint
from pulp import *
from snowflake.cortex import Complete,ExtractAnswer
import json


# Verificar tipo de conexi√≥n de snowflake
def set_session():
    try:
        import snowflake.permissions as permissions

        session = get_active_session()

        # fallar√° para una aplicaci√≥n no nativa
        privilege_check = permissions.get_held_account_privileges(["EXECUTE TASK"])

        st.session_state["streamlit_mode"] = "NativeApp"
    except:
        try:
            session = get_active_session()

            st.session_state["streamlit_mode"] = "SiS"
        except:
            import snowflake_conn as sfc

            session = sfc.init_snowpark_session("account_1")

            st.session_state["streamlit_mode"] = "OSS"

    return session


# Iniciar sesi√≥n
session = set_session()

fake = Faker()

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="Optimizaci√≥n de Red de Cadena de Suministro",
    page_icon="‚ùÑÔ∏èÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/snowflakecorp/supply-chain-optimization',
        'Report a bug': "https://github.com/snowflakecorp/supply-chain-optimization",
        'About': "Esta aplicaci√≥n realiza un modelo de optimizaci√≥n de red para una cadena de suministro de 3 niveles"
    }
)

# Establecer p√°gina inicial
if "page" not in st.session_state:
    st.session_state.page = "Bienvenida"


# Establece la p√°gina basada en el nombre de la p√°gina
def set_page(page: str):
    st.session_state.page = page


class OptimizationModel:
    """
    Una clase utilizada para representar un modelo de optimizaci√≥n de red de cadena de suministro. Un modelo de optimizaci√≥n
    maximiza/minimiza matem√°ticamente una funci√≥n objetivo basada en variables de decisi√≥n y un conjunto dado de restricciones.

    Para usar:
        - Instanciar la clase
        - Ejecutar el m√©todo prepare_data para configurar los datos del modelo
        - Ejecutar el m√©todo solve, pasando uno de los nombres de problema soportados
        - Hay un m√©todo solve_sample para ejecutar un modelo autocontenido

    Cualquier modelo es espec√≠fico para las entidades, relaciones, restricciones y objetivo de un negocio particular. Este es un
    modelo de demostraci√≥n que describe un escenario t√≠pico de cadena de suministro.
    """

    def __init__(self):
        self.factories = []
        self.production_capacities = {}
        self.production_costs = {}
        self.distributors = []
        self.throughput_capacities = {}
        self.throughput_costs = {}
        self.customers = []
        self.demand = {}
        self.factory_to_distributor_rates = {}
        self.distributor_to_customer_rates = {}
        self.factory_to_distributor_mileage = {}
        self.distributor_to_customer_mileage = {}
        self.problem_name = None
        self.lp_status = None
        self.decision_variables = None
        self.objective_value = None
        self.total_f2d_miles = None
        self.total_d2c_miles = None
        self.total_production_costs = None
        self.total_f2d_freight = None
        self.total_throughput_costs = None
        self.total_d2c_freight = None


def set_default_sidebar():
    # Barra lateral para navegar p√°ginas
    with st.sidebar:
        st.title("Optimizaci√≥n de Red de Cadena de Suministro üêª‚Äç‚ùÑ")
        st.markdown("")
        st.markdown("Esta aplicaci√≥n configura y ejecuta modelos de optimizaci√≥n de red de 3 niveles.")
        st.markdown("")
        if st.button(label="Preparaci√≥n de Datos üóÉÔ∏è", help="Advertencia: ¬°Los cambios no guardados se perder√°n!"):
            set_page('Preparaci√≥n de Datos')
            st.rerun()
        if st.button(label="Par√°metros del Modelo üßÆ", help="Advertencia: ¬°Los cambios no guardados se perder√°n!"):
            set_page('Par√°metros del Modelo')
            st.rerun()
        if st.button(label="Ejecuci√≥n del Modelo üöÄ", help="Advertencia: ¬°Los cambios no guardados se perder√°n!"):
            set_page('Ejecuci√≥n del Modelo')
            st.rerun()
        if st.button(label="Resultados del Modelo üìä", help="Advertencia: ¬°Los cambios no guardados se perder√°n!"):
            set_page('Resultados del Modelo')
            st.rerun()
        if st.button(label="Enriquecimiento Cortex ü§ñ", help="Advertencia: ¬°Los cambios no guardados se perder√°n!"):
            set_page('Enriquecimiento Cortex')
            st.rerun()
        st.markdown("")
        st.markdown("")
        st.markdown("")
        st.markdown("")
        if st.button(label="Volver al Inicio", help="Advertencia: ¬°Los cambios no guardados se perder√°n!"):
            set_page('Bienvenida')
            st.rerun()


class Page(ABC):
    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def print_page(self):
        pass

    @abstractmethod
    def print_sidebar(self):
        pass


class WelcomePage(Page):
    def __init__(self):
        self.name = "Bienvenida"

    def print_page(self):
        # Configurar p√°gina principal
        col1, col2 = st.columns((6, 1))
        col1.title("Optimizaci√≥n de Red de Cadena de Suministro üêª‚Äç‚ùÑÔ∏è")

        # P√°gina de bienvenida
        st.subheader("Bienvenido ‚ùÑÔ∏è")

        st.write('''El Modelo de Optimizaci√≥n de Red de Cadena de Suministro utiliza [Programaci√≥n Lineal](
        https://en.wikipedia.org/wiki/Linear_programming), tambi√©n llamada optimizaci√≥n lineal o programaci√≥n con restricciones.''')

        st.write('''La programaci√≥n lineal usa un sistema de desigualdades para definir un espacio matem√°tico regional factible, y un
        'solver' que recorre ese espacio ajustando una serie de variables de decisi√≥n, encontrando eficientemente el conjunto m√°s √≥ptimo
        de decisiones dadas las restricciones para cumplir con una funci√≥n objetivo establecida.''')

        st.write('''Tambi√©n es posible introducir variables de decisi√≥n basadas en enteros, lo que transforma el problema de un programa lineal a un programa entero mixto, pero la mec√°nica es
        fundamentalmente la misma.''')

        st.write("La funci√≥n objetivo define la meta - maximizar o minimizar un valor, como la ganancia o los costos.")
        st.write("Las variables de decisi√≥n son un conjunto de decisiones - los valores que el solver puede cambiar para impactar el "
                 "valor objetivo.")
        st.write(
            "Las restricciones definen las realidades del negocio - como enviar solo hasta una capacidad establecida.")

        st.write("Estamos utilizando la biblioteca PuLP, que nos permite definir un programa lineal y usar virtualmente cualquier "
                 "solver que queramos. Estamos usando el [solver CBC](https://github.com/coin-or/Cbc) gratuito por defecto de PuLP para nuestros "
                 "modelos.")

        with st.expander("Recursos Adicionales", expanded=True):
            st.write("¬øInteresado en [Programaci√≥n de Optimizaci√≥n usando PuLP](https://coin-or.github.io/pulp/)?")

    def print_sidebar(self):
        set_default_sidebar()


pages = [WelcomePage()]


def main():
    for page in pages:
        if page.name == st.session_state.page:
            page.print_page()
            page.print_sidebar()


main()
